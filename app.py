from flask import Flask, render_template, request
import pandas as pd
import random
import os
from sentence_transformers import SentenceTransformer, util  # ๐ฅ ููุชุจุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู

app = Flask(__name__)

# โ ุชุญููู ุจูุงูุงุช ุงูุชุนุฑููุงุช ูู ููู Excel
def load_legal_definitions():
    file_path = "legal_definitions.xlsx"
    if os.path.exists(file_path):
        df = pd.read_excel(file_path)
        return dict(zip(df['ุงููุตุทูุญ'], df['ุงูุชุนุฑูู']))
    return {}

legal_definitions = load_legal_definitions()

# โ ุชุญููู ูููุฐุฌ ุงูุฐูุงุก ุงูุงุตุทูุงุนู (BERT ูุญุณู)
model = SentenceTransformer('all-MiniLM-L6-v2')

# โ ุชุฌููุฒ ุงูุชูุซููุงุช ุงูุนุฏุฏูุฉ (Embeddings) ููุชุนุงุฑูู
terms = list(legal_definitions.keys())  # ุงููุตุทูุญุงุช ุงููุงููููุฉ
definitions = list(legal_definitions.values())  # ุงูุชุนุฑููุงุช
term_embeddings = model.encode(terms, convert_to_tensor=True)

# โ ุนุจุงุฑุงุช ุชุฑุญูุจ ูุฅุบูุงู
opening_phrases = ["๐น ุฑูููู ุงูุนุฒูุฒุ ุงูุฌูุงุจ ุนูู ุณุคุงูู ูู:", "๐น ุตุฏููู ุงููุงููููุ ุฅููู ุงูุฅุฌุงุจุฉ:"]
closing_phrases = ["๐ก ูู ูุฏูู ุงุณุชูุณุงุฑ ุขุฎุฑุ ุฃูุง ููุง ูููุณุงุนุฏุฉ!", "โ๏ธ ุฅู ููุช ุจุญุงุฌุฉ ุฅูู ุชูุถูุญ ุฃูุซุฑุ ูุง ุชุชุฑุฏุฏ ูู ุงูุณุคุงู!"]

# โ ุฏุงูุฉ ุงูุจุญุซ ุจุงุณุชุฎุฏุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู
def find_legal_definition(query):
    query_embedding = model.encode(query, convert_to_tensor=True)
    similarities = util.pytorch_cos_sim(query_embedding, term_embeddings)[0]  # ุญุณุงุจ ุงูุชุดุงุจู
    best_match_idx = similarities.argmax().item()  # ุงูุนุซูุฑ ุนูู ุฃูุฑุจ ูุตุทูุญ ูุงูููู
    best_match_term = terms[best_match_idx]  # ุงููุตุทูุญ ุงูุฃูุซุฑ ุชุทุงุจููุง
    best_match_definition = definitions[best_match_idx]  # ุงูุชุนุฑูู ุงูููุงุจู
    
    # ุงูุชุฃูุฏ ูู ุฃู ุงูุชุดุงุจู ุนุงูู ุจูุง ูููู ููููู ุงูุฌูุงุจ ููุทูููุง
    if similarities[best_match_idx] < 0.5:  
        return "โ ูู ุฃุชููู ูู ุงูุนุซูุฑ ุนูู ุฅุฌุงุจุฉ ุฏูููุฉ ูุณุคุงูู. ุญุงูู ุจุตูุงุบุฉ ุฃุฎุฑู."

    return f"{random.choice(opening_phrases)}\n\n๐ **{best_match_term}:** {best_match_definition}\n\n{random.choice(closing_phrases)}"

@app.route("/", methods=["GET", "POST"])
def index():
    response = ""
    if request.method == "POST":
        query = request.form["query"]
        response = find_legal_definition(query)
    return render_template("index.html", response=response)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))  # ุชุนููู ุงููููุฐ
    app.run(host="0.0.0.0", port=port, debug=True)

